// <auto-generated />
using System;
using System.Collections.Generic;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20230424050008_seed2")]
    partial class seed2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Models.BuyersProducts", b =>
                {
                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("BuyerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BuyersProducts");
                });

            modelBuilder.Entity("Data.Entities.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebe977a7-1773-4b23-a677-b7f3200599ba"),
                            Description = "Food for eating",
                            Name = "Food",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"ingredients\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("d3910333-fe03-42d7-8e3d-ac8f2d09df25"),
                            Description = "Clothes for wearing",
                            Name = "Clothes",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"size\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("8a02beb2-8b06-49db-9ba1-f27e82661e76"),
                            Description = "Electronics for using",
                            Name = "Electronics",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"voltage\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("a206db4f-2fdd-40b4-88ef-2c14f85c97be"),
                            Description = "Vehicles for driving",
                            Name = "Vehicles",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"color\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("cdf7870a-7d49-4180-ae2c-e5df90c9b062"),
                            Description = "Books for reading",
                            Name = "Books",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"author\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("6e711d1c-25b2-448f-9567-c49abfc365df"),
                            Description = "Furniture for sitting",
                            Name = "Furniture",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"color\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("960b4ae1-cd43-452c-bc15-c947e804b475"),
                            Description = "Toys for playing",
                            Name = "Toys",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"aimedFor\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("611b1eb0-1aff-4f21-b497-1e697ce67c19"),
                            Image = "https://www.countryflags.io/rs/flat/64.png",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("77e6eedf-891d-45af-9888-8dff22b9018d"),
                            Image = "https://www.countryflags.io/ba/flat/64.png",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("2004586a-e34a-48a1-8068-598559b2be37"),
                            Image = "https://www.countryflags.io/hr/flat/64.png",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("8b0a1921-8b16-4e62-a043-a50635d3d76c"),
                            Image = "https://www.countryflags.io/me/flat/64.png",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = new Guid("fd837fab-fa42-4800-93c5-51849f7dc753"),
                            Image = "https://www.countryflags.io/mk/flat/64.png",
                            Name = "Macedonia"
                        },
                        new
                        {
                            Id = new Guid("1d10f377-df33-496d-8193-592e60af558f"),
                            Image = "https://www.countryflags.io/si/flat/64.png",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("6215b842-ab4d-4940-a28e-a5c21d9ea1ec"),
                            Image = "https://www.countryflags.io/al/flat/64.png",
                            Name = "Albania"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aeab178a-eecd-4f2d-908c-44cb0a58801c"),
                            CountryId = new Guid("611b1eb0-1aff-4f21-b497-1e697ce67c19"),
                            Latitude = 44.786568m,
                            Longitude = 20.448921m,
                            Name = "Belgrade"
                        },
                        new
                        {
                            Id = new Guid("34c69446-cc0a-425c-8fb7-ef6c78a478f8"),
                            CountryId = new Guid("611b1eb0-1aff-4f21-b497-1e697ce67c19"),
                            Latitude = 45.251667m,
                            Longitude = 19.836944m,
                            Name = "Novi Sad"
                        },
                        new
                        {
                            Id = new Guid("223ef92a-5335-4937-ae06-79cb496751be"),
                            CountryId = new Guid("611b1eb0-1aff-4f21-b497-1e697ce67c19"),
                            Latitude = 43.856258m,
                            Longitude = 18.413076m,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = new Guid("8bc5d17c-0401-4ef9-b295-8a1a607c1000"),
                            CountryId = new Guid("2004586a-e34a-48a1-8068-598559b2be37"),
                            Latitude = 45.815010m,
                            Longitude = 15.981919m,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = new Guid("89ce41d1-aff7-4585-800c-3e838e8ec568"),
                            CountryId = new Guid("2004586a-e34a-48a1-8068-598559b2be37"),
                            Latitude = 42.460201m,
                            Longitude = 19.259995m,
                            Name = "Podgorica"
                        },
                        new
                        {
                            Id = new Guid("eaa0f6db-db14-4c14-8260-5ceb6774629d"),
                            CountryId = new Guid("77e6eedf-891d-45af-9888-8dff22b9018d"),
                            Latitude = 42.002876m,
                            Longitude = 21.436935m,
                            Name = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("570afee0-edd2-46d9-8367-1d8f2fbd4170"),
                            CountryId = new Guid("8b0a1921-8b16-4e62-a043-a50635d3d76c"),
                            Latitude = 46.056946m,
                            Longitude = 14.505751m,
                            Name = "Ljubljana"
                        },
                        new
                        {
                            Id = new Guid("93d982fb-1ae1-4d40-aef4-39e42baec339"),
                            CountryId = new Guid("fd837fab-fa42-4800-93c5-51849f7dc753"),
                            Latitude = 40.056946m,
                            Longitude = 10.505751m,
                            Name = "Town"
                        },
                        new
                        {
                            Id = new Guid("d885770e-f4cd-449a-bd8b-05872ffba755"),
                            CountryId = new Guid("1d10f377-df33-496d-8193-592e60af558f"),
                            Latitude = 20.056946m,
                            Longitude = 4.505751m,
                            Name = "othertown"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3de2e2bb-d0fb-46b2-8ce2-5a324f18e41e"),
                            CategoryId = new Guid("d3910333-fe03-42d7-8e3d-ac8f2d09df25"),
                            Created = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2905),
                            Description = "T-Shirt for wearing",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("aeab178a-eecd-4f2d-908c-44cb0a58801c"),
                            Name = "T-Shirt",
                            Price = 10m,
                            Quantity = 10,
                            SellerId = new Guid("56cf1149-4439-4d8e-8fe3-915b0cc92c9c"),
                            SubCategoryId = new Guid("633efeda-466b-4302-aa7a-9c192f4a3c9a"),
                            SubProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("505d8e4b-f37d-431c-a5a5-450cff959a1a"),
                            CategoryId = new Guid("d3910333-fe03-42d7-8e3d-ac8f2d09df25"),
                            Created = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(3091),
                            Description = "Jeans for wearing",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("aeab178a-eecd-4f2d-908c-44cb0a58801c"),
                            Name = "Jeans",
                            Price = 20m,
                            Quantity = 20,
                            SellerId = new Guid("56cf1149-4439-4d8e-8fe3-915b0cc92c9c"),
                            SubCategoryId = new Guid("c1e011fc-3d3c-4264-a0a1-ea9aea2d727f"),
                            SubProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"shades\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("d02f6a5c-c0d4-4868-9bb1-3bde112f6fca"),
                            CategoryId = new Guid("d3910333-fe03-42d7-8e3d-ac8f2d09df25"),
                            Created = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(3193),
                            Description = "Shoes for wearing",
                            ExtraProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("aeab178a-eecd-4f2d-908c-44cb0a58801c"),
                            Name = "Shoes",
                            Price = 30m,
                            Quantity = 30,
                            SellerId = new Guid("42b2a4d1-f4db-4460-a5f0-3a7e781fc94b"),
                            SubCategoryId = new Guid("c1e011fc-3d3c-4264-a0a1-ea9aea2d727f"),
                            SubProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("a67b958d-0d2d-4886-abf4-48ef535f37ad"),
                            CategoryId = new Guid("8a02beb2-8b06-49db-9ba1-f27e82661e76"),
                            Created = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(3272),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("aeab178a-eecd-4f2d-908c-44cb0a58801c"),
                            Name = "Windows Laptop",
                            Price = 500m,
                            Quantity = 5,
                            SellerId = new Guid("4b31f369-2831-4395-8a82-da860c087cbe"),
                            SubCategoryId = new Guid("8289ce7e-053a-448d-b95e-e6c2e03334b9"),
                            SubProperties = "{\r\n  \"brand\": \"cotton\",\r\n  \"screensizes\": [\r\n    \"1000p\",\r\n    \"400p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("bce20b2e-8f3a-4aae-81e7-85967c9ef9fc"),
                            CategoryId = new Guid("8a02beb2-8b06-49db-9ba1-f27e82661e76"),
                            Created = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(3353),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"macbook\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("89ce41d1-aff7-4585-800c-3e838e8ec568"),
                            Name = "MacBook",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("42b2a4d1-f4db-4460-a5f0-3a7e781fc94b"),
                            SubCategoryId = new Guid("8289ce7e-053a-448d-b95e-e6c2e03334b9"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"screensizes\": [\r\n    \"1000p\",\r\n    \"400p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("025c3c8b-7ca8-40b6-8ba4-d4f4164e49fa"),
                            CategoryId = new Guid("8a02beb2-8b06-49db-9ba1-f27e82661e76"),
                            Created = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(3459),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"asus\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("34c69446-cc0a-425c-8fb7-ef6c78a478f8"),
                            Name = "Asus Laptop",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("eed6b2dd-2cb4-4837-8577-76afef6d4d84"),
                            SubCategoryId = new Guid("8289ce7e-053a-448d-b95e-e6c2e03334b9"),
                            SubProperties = "{\r\n  \"brand\": \"asus\",\r\n  \"screensizes\": [\r\n    \"10300p\",\r\n    \"4100p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("ba4e4226-7788-470a-9af4-07adacffaaf3"),
                            CategoryId = new Guid("8a02beb2-8b06-49db-9ba1-f27e82661e76"),
                            Created = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(3598),
                            Description = "Iphone 12 for working",
                            ExtraProperties = "{\r\n  \"name\": \"iphone\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("34c69446-cc0a-425c-8fb7-ef6c78a478f8"),
                            Name = "Iphone 12",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("eed6b2dd-2cb4-4837-8577-76afef6d4d84"),
                            SubCategoryId = new Guid("8a54d209-31a2-4c4f-8ae9-e2e7658b1ebd"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("10a71ac3-9e3c-42af-a1c5-ee05aff80dc4"),
                            CategoryId = new Guid("8a02beb2-8b06-49db-9ba1-f27e82661e76"),
                            Created = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(3679),
                            Description = "Iphone 11 for working",
                            ExtraProperties = "{\r\n  \"name\": \"iphone\",\r\n  \"voltage\": [\r\n    \"150V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("34c69446-cc0a-425c-8fb7-ef6c78a478f8"),
                            Name = "Iphone 11",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("eed6b2dd-2cb4-4837-8577-76afef6d4d84"),
                            SubCategoryId = new Guid("8a54d209-31a2-4c4f-8ae9-e2e7658b1ebd"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("828d6d61-2320-4863-9dbd-7b2468aede7e"),
                            CategoryId = new Guid("ebe977a7-1773-4b23-a677-b7f3200599ba"),
                            Description = "Fruits for eating",
                            Name = "Fruits",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"sweetLevel\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("1e82b789-54fd-4a94-bb4b-5f47732cb152"),
                            CategoryId = new Guid("ebe977a7-1773-4b23-a677-b7f3200599ba"),
                            Description = "Vegetables for eating",
                            Name = "Vegetables",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"sourLevel\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("3ac76f2d-24d3-4a3a-a8bf-eb218d65a0e7"),
                            CategoryId = new Guid("ebe977a7-1773-4b23-a677-b7f3200599ba"),
                            Description = "Meat for eating",
                            Name = "Meat",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"taste\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("633efeda-466b-4302-aa7a-9c192f4a3c9a"),
                            CategoryId = new Guid("d3910333-fe03-42d7-8e3d-ac8f2d09df25"),
                            Description = "Shirts for wearing",
                            Name = "Shirts",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"material\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("c1e011fc-3d3c-4264-a0a1-ea9aea2d727f"),
                            CategoryId = new Guid("d3910333-fe03-42d7-8e3d-ac8f2d09df25"),
                            Description = "Pants for wearing",
                            Name = "Pants",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"material\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"shades\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("8a54d209-31a2-4c4f-8ae9-e2e7658b1ebd"),
                            CategoryId = new Guid("8a02beb2-8b06-49db-9ba1-f27e82661e76"),
                            Description = "Phones for using",
                            Name = "Phones",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("8289ce7e-053a-448d-b95e-e6c2e03334b9"),
                            CategoryId = new Guid("8a02beb2-8b06-49db-9ba1-f27e82661e76"),
                            Description = "Laptops for using",
                            Name = "Laptops",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"screensizes\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("97605215-0e59-4d1b-b980-b8379fb1db10"),
                            CategoryId = new Guid("a206db4f-2fdd-40b4-88ef-2c14f85c97be"),
                            Description = "Cars for driving",
                            Name = "Cars",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"motors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("b66d646c-b79e-476b-91a3-a0e813c2baee"),
                            CategoryId = new Guid("a206db4f-2fdd-40b4-88ef-2c14f85c97be"),
                            Description = "Bikes for driving",
                            Name = "Bikes",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"handles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("aa663b93-712f-4021-b38b-804c85455ec7"),
                            CategoryId = new Guid("cdf7870a-7d49-4180-ae2c-e5df90c9b062"),
                            Description = "Novels for reading",
                            Name = "Novels",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"genre\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"themes\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("a8e48c56-5033-4b7a-8333-aac523d1297a"),
                            CategoryId = new Guid("cdf7870a-7d49-4180-ae2c-e5df90c9b062"),
                            Description = "Comics for reading",
                            Name = "Comics",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"genre\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"characters\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56cf1149-4439-4d8e-8fe3-915b0cc92c9c"),
                            AddressId = new Guid("aeab178a-eecd-4f2d-908c-44cb0a58801c"),
                            CreatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2863),
                            Email = "John@gmail.com",
                            Name = "John",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2867)
                        },
                        new
                        {
                            Id = new Guid("eed6b2dd-2cb4-4837-8577-76afef6d4d84"),
                            AddressId = new Guid("34c69446-cc0a-425c-8fb7-ef6c78a478f8"),
                            CreatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2872),
                            Email = "Jane@gmail.com",
                            Name = "Jane",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2872)
                        },
                        new
                        {
                            Id = new Guid("e2763412-0851-4187-a9ad-fe9b89689f96"),
                            AddressId = new Guid("223ef92a-5335-4937-ae06-79cb496751be"),
                            CreatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2874),
                            Email = "admin@gmail.com",
                            Name = "Admin",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2875)
                        },
                        new
                        {
                            Id = new Guid("42b2a4d1-f4db-4460-a5f0-3a7e781fc94b"),
                            AddressId = new Guid("eaa0f6db-db14-4c14-8260-5ceb6774629d"),
                            CreatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2877),
                            Email = "admin2@gmail.com",
                            Name = "Admin2",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2877)
                        },
                        new
                        {
                            Id = new Guid("4b31f369-2831-4395-8a82-da860c087cbe"),
                            AddressId = new Guid("89ce41d1-aff7-4585-800c-3e838e8ec568"),
                            CreatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2881),
                            Email = "admin3@gmail.com",
                            Name = "Admin3",
                            Password = "123sdda456",
                            UpdatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2882)
                        },
                        new
                        {
                            Id = new Guid("11273c30-ff1f-4b50-9663-8a57eed70c9f"),
                            AddressId = new Guid("93d982fb-1ae1-4d40-aef4-39e42baec339"),
                            CreatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2885),
                            Email = "DebyDebyDoo@gmail.com",
                            Name = "DebyDoo",
                            Password = "debugger",
                            UpdatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2885)
                        },
                        new
                        {
                            Id = new Guid("fe7cc45d-4b3c-4b58-a7e8-2b5b83a2ee61"),
                            AddressId = new Guid("570afee0-edd2-46d9-8367-1d8f2fbd4170"),
                            CreatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2887),
                            Email = "none@gmail.com",
                            Name = "nonexistant",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2887)
                        },
                        new
                        {
                            Id = new Guid("5365b64f-f746-4da3-989f-16b2ba071976"),
                            AddressId = new Guid("d885770e-f4cd-449a-bd8b-05872ffba755"),
                            CreatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2890),
                            Email = "duje@gmail.com",
                            Name = "duje",
                            Password = "1111",
                            UpdatedAt = new DateTime(2023, 4, 24, 5, 0, 8, 714, DateTimeKind.Utc).AddTicks(2890)
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.BuyersProducts", b =>
                {
                    b.HasOne("Data.Entities.Models.User", "Buyer")
                        .WithMany("BoughtProducts")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.Product", "Product")
                        .WithMany("Buyers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.HasOne("Data.Entities.Models.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.HasOne("Data.Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.Location", "Location")
                        .WithMany("Products")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.User", "Seller")
                        .WithMany("ListedProducts")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Seller");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.HasOne("Data.Entities.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.HasOne("Data.Entities.Models.Location", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Data.Entities.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Data.Entities.Models.Country", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.Navigation("Buyers");
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.Navigation("BoughtProducts");

                    b.Navigation("ListedProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
