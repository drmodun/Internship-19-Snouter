// <auto-generated />
using System;
using System.Collections.Generic;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20230424003514_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Models.BuyersProducts", b =>
                {
                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("BuyerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BuyersProducts");
                });

            modelBuilder.Entity("Data.Entities.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("338b6dff-1620-4c4e-ab24-56b253d1b327"),
                            Description = "Food for eating",
                            Name = "Food",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"ingredients\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("e11b4eb2-6895-4588-9d70-1cf103ce1279"),
                            Description = "Clothes for wearing",
                            Name = "Clothes",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"size\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("1df1d8e6-f2e5-4d33-8c9c-90b256605e0e"),
                            Description = "Electronics for using",
                            Name = "Electronics",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"voltage\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("946036da-d5de-4eef-8912-5762d0f2805d"),
                            Description = "Vehicles for driving",
                            Name = "Vehicles",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"color\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("db4b4fc1-f050-4075-83a0-95c2f3497267"),
                            Description = "Books for reading",
                            Name = "Books",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"author\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("c02c44ef-6254-419a-9918-d565c30d27f5"),
                            Description = "Furniture for sitting",
                            Name = "Furniture",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"color\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("2a081aa1-504d-4913-96d8-595e9faaffa9"),
                            Description = "Toys for playing",
                            Name = "Toys",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"aimedFor\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5172903-b584-46fe-a98c-a2a634916360"),
                            Image = "https://www.countryflags.io/rs/flat/64.png",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("626e3b81-55e5-4907-a17b-a5c2b7180e20"),
                            Image = "https://www.countryflags.io/ba/flat/64.png",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("3b040119-c518-4f8f-a37c-8e1df235b4e9"),
                            Image = "https://www.countryflags.io/hr/flat/64.png",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("12cdf073-8d73-4830-a812-71932c6c9c76"),
                            Image = "https://www.countryflags.io/me/flat/64.png",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = new Guid("f45a21a4-7ca5-4f4f-a205-cb69a97b8c89"),
                            Image = "https://www.countryflags.io/mk/flat/64.png",
                            Name = "Macedonia"
                        },
                        new
                        {
                            Id = new Guid("71d315e9-e5c0-4aa4-ba9f-fe9f4d473817"),
                            Image = "https://www.countryflags.io/si/flat/64.png",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("f4146393-ef7a-47f0-a2c8-b1c370bdce0d"),
                            Image = "https://www.countryflags.io/al/flat/64.png",
                            Name = "Albania"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa62203c-06ff-43d4-b733-5efeaf52a70a"),
                            CountryId = new Guid("f5172903-b584-46fe-a98c-a2a634916360"),
                            Latitude = 44.786568m,
                            Longitude = 20.448921m,
                            Name = "Belgrade"
                        },
                        new
                        {
                            Id = new Guid("43c371e8-348a-482e-8051-f024678702f4"),
                            CountryId = new Guid("f5172903-b584-46fe-a98c-a2a634916360"),
                            Latitude = 45.251667m,
                            Longitude = 19.836944m,
                            Name = "Novi Sad"
                        },
                        new
                        {
                            Id = new Guid("35b97e91-b15e-4edf-933b-a81cea3cf22d"),
                            CountryId = new Guid("f5172903-b584-46fe-a98c-a2a634916360"),
                            Latitude = 43.856258m,
                            Longitude = 18.413076m,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = new Guid("e2c43b31-ce75-47cc-b688-cc8c87d778da"),
                            CountryId = new Guid("3b040119-c518-4f8f-a37c-8e1df235b4e9"),
                            Latitude = 45.815010m,
                            Longitude = 15.981919m,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = new Guid("65a6a13d-611d-49c5-b548-8a8a4e84ab6d"),
                            CountryId = new Guid("3b040119-c518-4f8f-a37c-8e1df235b4e9"),
                            Latitude = 42.460201m,
                            Longitude = 19.259995m,
                            Name = "Podgorica"
                        },
                        new
                        {
                            Id = new Guid("8257ea0f-708f-42ad-bf21-644d92b8b7d0"),
                            CountryId = new Guid("626e3b81-55e5-4907-a17b-a5c2b7180e20"),
                            Latitude = 42.002876m,
                            Longitude = 21.436935m,
                            Name = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("0bd9403b-c155-4132-9251-9dff67dc0830"),
                            CountryId = new Guid("12cdf073-8d73-4830-a812-71932c6c9c76"),
                            Latitude = 46.056946m,
                            Longitude = 14.505751m,
                            Name = "Ljubljana"
                        },
                        new
                        {
                            Id = new Guid("523bc55d-a297-4798-8599-1a834cd538dc"),
                            CountryId = new Guid("f45a21a4-7ca5-4f4f-a205-cb69a97b8c89"),
                            Latitude = 40.056946m,
                            Longitude = 10.505751m,
                            Name = "Town"
                        },
                        new
                        {
                            Id = new Guid("3d77cc3d-af6b-4b2e-9d03-802ea7c9bc67"),
                            CountryId = new Guid("71d315e9-e5c0-4aa4-ba9f-fe9f4d473817"),
                            Latitude = 20.056946m,
                            Longitude = 4.505751m,
                            Name = "othertown"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fe4fa92-fcba-42d5-81c0-983c5c892173"),
                            CategoryId = new Guid("e11b4eb2-6895-4588-9d70-1cf103ce1279"),
                            Created = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3425),
                            Description = "T-Shirt for wearing",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("fa62203c-06ff-43d4-b733-5efeaf52a70a"),
                            Name = "T-Shirt",
                            Price = 10m,
                            Quantity = 10,
                            SellerId = new Guid("06e11082-0fae-4c1b-84b3-c83a421a6001"),
                            SubCategoryId = new Guid("9fb48dd6-cfb2-4140-9716-d91f0cb3b601"),
                            SubProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("9f1ba821-f7a8-4ea1-a4a3-01bdcc9f29c6"),
                            CategoryId = new Guid("e11b4eb2-6895-4588-9d70-1cf103ce1279"),
                            Created = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3643),
                            Description = "Jeans for wearing",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("fa62203c-06ff-43d4-b733-5efeaf52a70a"),
                            Name = "Jeans",
                            Price = 20m,
                            Quantity = 20,
                            SellerId = new Guid("06e11082-0fae-4c1b-84b3-c83a421a6001"),
                            SubCategoryId = new Guid("1d355207-c3dd-452c-95df-b23a1fc83abc"),
                            SubProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"shades\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("e802c6ac-b346-4450-84e1-4857f51062ee"),
                            CategoryId = new Guid("e11b4eb2-6895-4588-9d70-1cf103ce1279"),
                            Created = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3793),
                            Description = "Shoes for wearing",
                            ExtraProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("fa62203c-06ff-43d4-b733-5efeaf52a70a"),
                            Name = "Shoes",
                            Price = 30m,
                            Quantity = 30,
                            SellerId = new Guid("2232fa4b-74ad-4925-a957-9aef9280d2d3"),
                            SubCategoryId = new Guid("1d355207-c3dd-452c-95df-b23a1fc83abc"),
                            SubProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("336806b3-aa7b-4696-befe-ff0a19285ae8"),
                            CategoryId = new Guid("1df1d8e6-f2e5-4d33-8c9c-90b256605e0e"),
                            Created = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3893),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("fa62203c-06ff-43d4-b733-5efeaf52a70a"),
                            Name = "Windows Laptop",
                            Price = 500m,
                            Quantity = 5,
                            SellerId = new Guid("a6e8cad0-ad7a-48a3-87e5-a6189f9a4e3c"),
                            SubCategoryId = new Guid("b09e61d9-69ae-4ac3-91cc-d480695a40c6"),
                            SubProperties = "{\r\n  \"brand\": \"cotton\",\r\n  \"screensizes\": [\r\n    \"1000p\",\r\n    \"400p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("115cc146-04bc-4f7b-aa8f-a91940282555"),
                            CategoryId = new Guid("1df1d8e6-f2e5-4d33-8c9c-90b256605e0e"),
                            Created = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(4004),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"macbook\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("65a6a13d-611d-49c5-b548-8a8a4e84ab6d"),
                            Name = "MacBook",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("2232fa4b-74ad-4925-a957-9aef9280d2d3"),
                            SubCategoryId = new Guid("b09e61d9-69ae-4ac3-91cc-d480695a40c6"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"screensizes\": [\r\n    \"1000p\",\r\n    \"400p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("6c8f91d6-2d2d-4f6b-9b30-23716c24cdc0"),
                            CategoryId = new Guid("1df1d8e6-f2e5-4d33-8c9c-90b256605e0e"),
                            Created = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(4135),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"asus\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("43c371e8-348a-482e-8051-f024678702f4"),
                            Name = "Asus Laptop",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("3d2ed5f6-3e8d-4a65-b8d0-b45a262fdb05"),
                            SubCategoryId = new Guid("b09e61d9-69ae-4ac3-91cc-d480695a40c6"),
                            SubProperties = "{\r\n  \"brand\": \"asus\",\r\n  \"screensizes\": [\r\n    \"10300p\",\r\n    \"4100p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("c3a456af-e12a-4c5b-9e77-cf239d401b96"),
                            CategoryId = new Guid("1df1d8e6-f2e5-4d33-8c9c-90b256605e0e"),
                            Created = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(4746),
                            Description = "Iphone 12 for working",
                            ExtraProperties = "{\r\n  \"name\": \"iphone\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("43c371e8-348a-482e-8051-f024678702f4"),
                            Name = "Iphone 12",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("3d2ed5f6-3e8d-4a65-b8d0-b45a262fdb05"),
                            SubCategoryId = new Guid("7c9fb98f-f4b9-41c8-b76d-08a51fcb704b"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("989ee745-9a87-4ee9-bdaa-4fad4def6044"),
                            CategoryId = new Guid("1df1d8e6-f2e5-4d33-8c9c-90b256605e0e"),
                            Created = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(4889),
                            Description = "Iphone 11 for working",
                            ExtraProperties = "{\r\n  \"name\": \"iphone\",\r\n  \"voltage\": [\r\n    \"150V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("43c371e8-348a-482e-8051-f024678702f4"),
                            Name = "Iphone 11",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("3d2ed5f6-3e8d-4a65-b8d0-b45a262fdb05"),
                            SubCategoryId = new Guid("7c9fb98f-f4b9-41c8-b76d-08a51fcb704b"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79334430-93da-477f-a52b-336a808ef9aa"),
                            CategoryId = new Guid("338b6dff-1620-4c4e-ab24-56b253d1b327"),
                            Description = "Fruits for eating",
                            Name = "Fruits",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"sweetLevel\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("bda15054-c81f-4df0-90f7-1e601c65d988"),
                            CategoryId = new Guid("338b6dff-1620-4c4e-ab24-56b253d1b327"),
                            Description = "Vegetables for eating",
                            Name = "Vegetables",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"sourLevel\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("078f7d52-c17d-413d-85d0-43d377231ccb"),
                            CategoryId = new Guid("338b6dff-1620-4c4e-ab24-56b253d1b327"),
                            Description = "Meat for eating",
                            Name = "Meat",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"taste\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("9fb48dd6-cfb2-4140-9716-d91f0cb3b601"),
                            CategoryId = new Guid("e11b4eb2-6895-4588-9d70-1cf103ce1279"),
                            Description = "Shirts for wearing",
                            Name = "Shirts",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"material\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("1d355207-c3dd-452c-95df-b23a1fc83abc"),
                            CategoryId = new Guid("e11b4eb2-6895-4588-9d70-1cf103ce1279"),
                            Description = "Pants for wearing",
                            Name = "Pants",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"material\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"shades\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("7c9fb98f-f4b9-41c8-b76d-08a51fcb704b"),
                            CategoryId = new Guid("1df1d8e6-f2e5-4d33-8c9c-90b256605e0e"),
                            Description = "Phones for using",
                            Name = "Phones",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("b09e61d9-69ae-4ac3-91cc-d480695a40c6"),
                            CategoryId = new Guid("1df1d8e6-f2e5-4d33-8c9c-90b256605e0e"),
                            Description = "Laptops for using",
                            Name = "Laptops",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"screensizes\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("72fa7799-a0ed-4b72-ab29-cd7facda88f1"),
                            CategoryId = new Guid("946036da-d5de-4eef-8912-5762d0f2805d"),
                            Description = "Cars for driving",
                            Name = "Cars",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"motors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("20c536da-0c49-4747-b276-b5f57fc11a31"),
                            CategoryId = new Guid("946036da-d5de-4eef-8912-5762d0f2805d"),
                            Description = "Bikes for driving",
                            Name = "Bikes",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"handles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("88363248-a399-430d-86db-14ad03dae8f1"),
                            CategoryId = new Guid("db4b4fc1-f050-4075-83a0-95c2f3497267"),
                            Description = "Novels for reading",
                            Name = "Novels",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"genre\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"themes\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("2847a4a1-f57a-4508-a728-50b597890ade"),
                            CategoryId = new Guid("db4b4fc1-f050-4075-83a0-95c2f3497267"),
                            Description = "Comics for reading",
                            Name = "Comics",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"genre\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"characters\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06e11082-0fae-4c1b-84b3-c83a421a6001"),
                            AddressId = new Guid("fa62203c-06ff-43d4-b733-5efeaf52a70a"),
                            CreatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3337),
                            Email = "John@gmail.com",
                            Name = "John",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3341)
                        },
                        new
                        {
                            Id = new Guid("3d2ed5f6-3e8d-4a65-b8d0-b45a262fdb05"),
                            AddressId = new Guid("43c371e8-348a-482e-8051-f024678702f4"),
                            CreatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3384),
                            Email = "Jane@gmail.com",
                            Name = "Jane",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3384)
                        },
                        new
                        {
                            Id = new Guid("24a0628b-bad2-496e-8be2-59006b97e440"),
                            AddressId = new Guid("35b97e91-b15e-4edf-933b-a81cea3cf22d"),
                            CreatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3387),
                            Email = "admin@gmail.com",
                            Name = "Admin",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3388)
                        },
                        new
                        {
                            Id = new Guid("2232fa4b-74ad-4925-a957-9aef9280d2d3"),
                            AddressId = new Guid("8257ea0f-708f-42ad-bf21-644d92b8b7d0"),
                            CreatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3391),
                            Email = "admin2@gmail.com",
                            Name = "Admin2",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3391)
                        },
                        new
                        {
                            Id = new Guid("a6e8cad0-ad7a-48a3-87e5-a6189f9a4e3c"),
                            AddressId = new Guid("65a6a13d-611d-49c5-b548-8a8a4e84ab6d"),
                            CreatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3394),
                            Email = "admin3@gmail.com",
                            Name = "Admin3",
                            Password = "123sdda456",
                            UpdatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3395)
                        },
                        new
                        {
                            Id = new Guid("55695980-cfb1-474c-b520-81dc0d7660b0"),
                            AddressId = new Guid("523bc55d-a297-4798-8599-1a834cd538dc"),
                            CreatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3399),
                            Email = "DebyDebyDoo@gmail.com",
                            Name = "DebyDoo",
                            Password = "debugger",
                            UpdatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3399)
                        },
                        new
                        {
                            Id = new Guid("130eeb6d-69b9-46d2-97ef-064579a25f95"),
                            AddressId = new Guid("0bd9403b-c155-4132-9251-9dff67dc0830"),
                            CreatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3405),
                            Email = "none@gmail.com",
                            Name = "nonexistant",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3405)
                        },
                        new
                        {
                            Id = new Guid("3dc8d114-5a76-420a-9ae4-6e3564cbc395"),
                            AddressId = new Guid("3d77cc3d-af6b-4b2e-9d03-802ea7c9bc67"),
                            CreatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3408),
                            Email = "duje@gmail.com",
                            Name = "duje",
                            Password = "1111",
                            UpdatedAt = new DateTime(2023, 4, 24, 0, 35, 14, 200, DateTimeKind.Utc).AddTicks(3409)
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.BuyersProducts", b =>
                {
                    b.HasOne("Data.Entities.Models.User", "Buyer")
                        .WithMany("BoughtProducts")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.Product", "Product")
                        .WithMany("Buyers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.HasOne("Data.Entities.Models.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.HasOne("Data.Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.Location", "Location")
                        .WithMany("Products")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.User", "Seller")
                        .WithMany("ListedProducts")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Seller");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.HasOne("Data.Entities.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.HasOne("Data.Entities.Models.Location", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Data.Entities.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Data.Entities.Models.Country", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.Navigation("Buyers");
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.Navigation("BoughtProducts");

                    b.Navigation("ListedProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
