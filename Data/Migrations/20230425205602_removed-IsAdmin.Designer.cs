// <auto-generated />
using System;
using System.Collections.Generic;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20230425205602_removed-IsAdmin")]
    partial class removedIsAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Models.BuyersProducts", b =>
                {
                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("BuyerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BuyersProducts");
                });

            modelBuilder.Entity("Data.Entities.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fd7ac59-6f1d-439d-a6a1-3a94316110c6"),
                            Description = "Food for eating",
                            Name = "Food",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"ingredients\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("cee2cf25-7860-426d-b37f-caebe546f678"),
                            Description = "Clothes for wearing",
                            Name = "Clothes",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"size\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("70ae5aad-4f35-4823-8ad4-c05b3f146155"),
                            Description = "Electronics for using",
                            Name = "Electronics",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"voltage\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("d5a18a1e-3f0b-4f06-acd1-569bf58960ab"),
                            Description = "Vehicles for driving",
                            Name = "Vehicles",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"color\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("363f235a-cba6-4e3f-ba07-53ce7ee633d5"),
                            Description = "Books for reading",
                            Name = "Books",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"author\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("0943faab-f029-44c3-bfb3-3bf1bdf490d1"),
                            Description = "Furniture for sitting",
                            Name = "Furniture",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"color\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("f1e5eac1-9598-4dd8-bd67-17fb9b45dc1e"),
                            Description = "Toys for playing",
                            Name = "Toys",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"aimedFor\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa1ad28c-9505-4685-a7ea-92ff64f60ae4"),
                            Image = "https://www.countryflags.io/rs/flat/64.png",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("46316c03-a146-4488-a187-008a1aeb7749"),
                            Image = "https://www.countryflags.io/ba/flat/64.png",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("37f5fa7a-d3af-479b-96cf-27b5b65edc04"),
                            Image = "https://www.countryflags.io/hr/flat/64.png",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("fb91669a-73c0-4af6-bea0-e4376d1acf68"),
                            Image = "https://www.countryflags.io/me/flat/64.png",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = new Guid("c88fa1f4-9729-4cc4-ab0b-34cc2c8d4b3c"),
                            Image = "https://www.countryflags.io/mk/flat/64.png",
                            Name = "Macedonia"
                        },
                        new
                        {
                            Id = new Guid("db65ccb6-d5e0-47a6-b206-1e71e8d16182"),
                            Image = "https://www.countryflags.io/si/flat/64.png",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("4bad97a8-b9c6-4606-bdca-097f437f5caf"),
                            Image = "https://www.countryflags.io/al/flat/64.png",
                            Name = "Albania"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afd8bb36-3881-4bb0-a61a-8f2bf2a78a49"),
                            CountryId = new Guid("fa1ad28c-9505-4685-a7ea-92ff64f60ae4"),
                            Latitude = 44.786568m,
                            Longitude = 20.448921m,
                            Name = "Belgrade"
                        },
                        new
                        {
                            Id = new Guid("233ff0c5-8e2b-438b-a042-3f3492d9dfd2"),
                            CountryId = new Guid("fa1ad28c-9505-4685-a7ea-92ff64f60ae4"),
                            Latitude = 45.251667m,
                            Longitude = 19.836944m,
                            Name = "Novi Sad"
                        },
                        new
                        {
                            Id = new Guid("bb8dc4af-fc43-4966-96b8-2b15d5900f27"),
                            CountryId = new Guid("fa1ad28c-9505-4685-a7ea-92ff64f60ae4"),
                            Latitude = 43.856258m,
                            Longitude = 18.413076m,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = new Guid("17154c23-eae3-44cf-ac01-da549bb09d49"),
                            CountryId = new Guid("37f5fa7a-d3af-479b-96cf-27b5b65edc04"),
                            Latitude = 45.815010m,
                            Longitude = 15.981919m,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = new Guid("2c05a698-a94f-42b3-8d99-f221f7a4941b"),
                            CountryId = new Guid("37f5fa7a-d3af-479b-96cf-27b5b65edc04"),
                            Latitude = 42.460201m,
                            Longitude = 19.259995m,
                            Name = "Podgorica"
                        },
                        new
                        {
                            Id = new Guid("d5624734-40da-4844-bb7d-9810ba1a9a8a"),
                            CountryId = new Guid("46316c03-a146-4488-a187-008a1aeb7749"),
                            Latitude = 42.002876m,
                            Longitude = 21.436935m,
                            Name = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("0c54faa4-0677-4047-b5de-4dbc22b94afc"),
                            CountryId = new Guid("fb91669a-73c0-4af6-bea0-e4376d1acf68"),
                            Latitude = 46.056946m,
                            Longitude = 14.505751m,
                            Name = "Ljubljana"
                        },
                        new
                        {
                            Id = new Guid("efba08a9-544c-4f50-90c0-5656763cc927"),
                            CountryId = new Guid("c88fa1f4-9729-4cc4-ab0b-34cc2c8d4b3c"),
                            Latitude = 40.056946m,
                            Longitude = 10.505751m,
                            Name = "Town"
                        },
                        new
                        {
                            Id = new Guid("cfde2a17-4ab2-4eab-85c8-ce723f93199c"),
                            CountryId = new Guid("db65ccb6-d5e0-47a6-b206-1e71e8d16182"),
                            Latitude = 20.056946m,
                            Longitude = 4.505751m,
                            Name = "othertown"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1d447db-3002-4f0d-8bca-52380dbc160e"),
                            CategoryId = new Guid("cee2cf25-7860-426d-b37f-caebe546f678"),
                            Created = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9587),
                            Description = "T-Shirt for wearing",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("afd8bb36-3881-4bb0-a61a-8f2bf2a78a49"),
                            Name = "T-Shirt",
                            Price = 10m,
                            Quantity = 10,
                            SellerId = new Guid("a91c99a8-78ec-458b-98da-543bcbd8c945"),
                            SubCategoryId = new Guid("b991f2f6-257c-4620-a6aa-19a8e93248e6"),
                            SubProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("c5330fa8-9be0-4734-a9fe-5308036e81f0"),
                            CategoryId = new Guid("cee2cf25-7860-426d-b37f-caebe546f678"),
                            Created = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9744),
                            Description = "Jeans for wearing",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("afd8bb36-3881-4bb0-a61a-8f2bf2a78a49"),
                            Name = "Jeans",
                            Price = 20m,
                            Quantity = 20,
                            SellerId = new Guid("a91c99a8-78ec-458b-98da-543bcbd8c945"),
                            SubCategoryId = new Guid("50112b93-9feb-4301-a294-049883c171d0"),
                            SubProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"shades\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("0ba565df-1d3f-4b60-8ea0-ad28f4912b96"),
                            CategoryId = new Guid("cee2cf25-7860-426d-b37f-caebe546f678"),
                            Created = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9851),
                            Description = "Shoes for wearing",
                            ExtraProperties = "{\r\n  \"material\": \"cotton\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("afd8bb36-3881-4bb0-a61a-8f2bf2a78a49"),
                            Name = "Shoes",
                            Price = 30m,
                            Quantity = 30,
                            SellerId = new Guid("970d35d3-4e85-4c8c-be72-07c5ef2bb419"),
                            SubCategoryId = new Guid("50112b93-9feb-4301-a294-049883c171d0"),
                            SubProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"size\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("34b3ee0f-afc2-410b-baa8-cd6f921c95d2"),
                            CategoryId = new Guid("70ae5aad-4f35-4823-8ad4-c05b3f146155"),
                            Created = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9934),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"cotton\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("afd8bb36-3881-4bb0-a61a-8f2bf2a78a49"),
                            Name = "Windows Laptop",
                            Price = 500m,
                            Quantity = 5,
                            SellerId = new Guid("c008bba0-8bc1-4058-b071-ae6556d5573f"),
                            SubCategoryId = new Guid("aa56f432-c8f5-4277-a46a-eaf2d1017aef"),
                            SubProperties = "{\r\n  \"brand\": \"cotton\",\r\n  \"screensizes\": [\r\n    \"1000p\",\r\n    \"400p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("eee5d1d8-48fb-4a86-9e08-5274d8805f7e"),
                            CategoryId = new Guid("70ae5aad-4f35-4823-8ad4-c05b3f146155"),
                            Created = new DateTime(2023, 4, 25, 20, 56, 2, 182, DateTimeKind.Utc).AddTicks(13),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"macbook\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("2c05a698-a94f-42b3-8d99-f221f7a4941b"),
                            Name = "MacBook",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("970d35d3-4e85-4c8c-be72-07c5ef2bb419"),
                            SubCategoryId = new Guid("aa56f432-c8f5-4277-a46a-eaf2d1017aef"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"screensizes\": [\r\n    \"1000p\",\r\n    \"400p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("3b596221-166b-4799-93c7-c2579a7720cd"),
                            CategoryId = new Guid("70ae5aad-4f35-4823-8ad4-c05b3f146155"),
                            Created = new DateTime(2023, 4, 25, 20, 56, 2, 182, DateTimeKind.Utc).AddTicks(113),
                            Description = "Laptop for working",
                            ExtraProperties = "{\r\n  \"name\": \"asus\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("233ff0c5-8e2b-438b-a042-3f3492d9dfd2"),
                            Name = "Asus Laptop",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("fcdda975-2cd7-4156-9fa0-f3a4c15d349c"),
                            SubCategoryId = new Guid("aa56f432-c8f5-4277-a46a-eaf2d1017aef"),
                            SubProperties = "{\r\n  \"brand\": \"asus\",\r\n  \"screensizes\": [\r\n    \"10300p\",\r\n    \"4100p\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("f3a94acf-ba01-42c1-88d8-d0466e7695e4"),
                            CategoryId = new Guid("70ae5aad-4f35-4823-8ad4-c05b3f146155"),
                            Created = new DateTime(2023, 4, 25, 20, 56, 2, 182, DateTimeKind.Utc).AddTicks(262),
                            Description = "Iphone 12 for working",
                            ExtraProperties = "{\r\n  \"name\": \"iphone\",\r\n  \"voltage\": [\r\n    \"250V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("233ff0c5-8e2b-438b-a042-3f3492d9dfd2"),
                            Name = "Iphone 12",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("fcdda975-2cd7-4156-9fa0-f3a4c15d349c"),
                            SubCategoryId = new Guid("8f06b2a1-28c5-4c61-ad8f-193f11966fea"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        },
                        new
                        {
                            Id = new Guid("bd9423c7-0c31-4366-a500-a08bf3f1189e"),
                            CategoryId = new Guid("70ae5aad-4f35-4823-8ad4-c05b3f146155"),
                            Created = new DateTime(2023, 4, 25, 20, 56, 2, 182, DateTimeKind.Utc).AddTicks(341),
                            Description = "Iphone 11 for working",
                            ExtraProperties = "{\r\n  \"name\": \"iphone\",\r\n  \"voltage\": [\r\n    \"150V\",\r\n    \"100V\"\r\n  ]\r\n}",
                            Images = new List<string> { "https://i.imgur.com/1Q1Z1Zm.jpg" },
                            LocationId = new Guid("233ff0c5-8e2b-438b-a042-3f3492d9dfd2"),
                            Name = "Iphone 11",
                            Price = 1000m,
                            Quantity = 5,
                            SellerId = new Guid("fcdda975-2cd7-4156-9fa0-f3a4c15d349c"),
                            SubCategoryId = new Guid("8f06b2a1-28c5-4c61-ad8f-193f11966fea"),
                            SubProperties = "{\r\n  \"brand\": \"apple\",\r\n  \"colors\": [\r\n    \"red\",\r\n    \"blue\"\r\n  ]\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6ca0d51-c327-4002-8352-e715b6f9070a"),
                            CategoryId = new Guid("1fd7ac59-6f1d-439d-a6a1-3a94316110c6"),
                            Description = "Fruits for eating",
                            Name = "Fruits",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"sweetLevel\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("f4c2ce93-9705-4711-b3b7-8bdc78de4dc3"),
                            CategoryId = new Guid("1fd7ac59-6f1d-439d-a6a1-3a94316110c6"),
                            Description = "Vegetables for eating",
                            Name = "Vegetables",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"sourLevel\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("6802cf9c-2c75-4424-b723-408f8307ddf9"),
                            CategoryId = new Guid("1fd7ac59-6f1d-439d-a6a1-3a94316110c6"),
                            Description = "Meat for eating",
                            Name = "Meat",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"taste\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("b991f2f6-257c-4620-a6aa-19a8e93248e6"),
                            CategoryId = new Guid("cee2cf25-7860-426d-b37f-caebe546f678"),
                            Description = "Shirts for wearing",
                            Name = "Shirts",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"material\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("50112b93-9feb-4301-a294-049883c171d0"),
                            CategoryId = new Guid("cee2cf25-7860-426d-b37f-caebe546f678"),
                            Description = "Pants for wearing",
                            Name = "Pants",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"material\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"shades\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("8f06b2a1-28c5-4c61-ad8f-193f11966fea"),
                            CategoryId = new Guid("70ae5aad-4f35-4823-8ad4-c05b3f146155"),
                            Description = "Phones for using",
                            Name = "Phones",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"colors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("aa56f432-c8f5-4277-a46a-eaf2d1017aef"),
                            CategoryId = new Guid("70ae5aad-4f35-4823-8ad4-c05b3f146155"),
                            Description = "Laptops for using",
                            Name = "Laptops",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"screensizes\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("d85089b5-0275-4255-a558-9aa6fc021c44"),
                            CategoryId = new Guid("d5a18a1e-3f0b-4f06-acd1-569bf58960ab"),
                            Description = "Cars for driving",
                            Name = "Cars",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"motors\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("3adf8410-611e-4f7b-ae6a-48b8248717f6"),
                            CategoryId = new Guid("d5a18a1e-3f0b-4f06-acd1-569bf58960ab"),
                            Description = "Bikes for driving",
                            Name = "Bikes",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"brand\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"handles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("62a496b4-492d-475d-a26e-2e70bbeb3fe3"),
                            CategoryId = new Guid("363f235a-cba6-4e3f-ba07-53ce7ee633d5"),
                            Description = "Novels for reading",
                            Name = "Novels",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"genre\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"themes\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("b26b0570-f741-46c0-b2cf-432f9aeceb0b"),
                            CategoryId = new Guid("363f235a-cba6-4e3f-ba07-53ce7ee633d5"),
                            Description = "Comics for reading",
                            Name = "Comics",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"genre\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"characters\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a91c99a8-78ec-458b-98da-543bcbd8c945"),
                            AddressId = new Guid("afd8bb36-3881-4bb0-a61a-8f2bf2a78a49"),
                            CreatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9554),
                            Email = "John@gmail.com",
                            Name = "John",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9556)
                        },
                        new
                        {
                            Id = new Guid("fcdda975-2cd7-4156-9fa0-f3a4c15d349c"),
                            AddressId = new Guid("233ff0c5-8e2b-438b-a042-3f3492d9dfd2"),
                            CreatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9560),
                            Email = "Jane@gmail.com",
                            Name = "Jane",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9560)
                        },
                        new
                        {
                            Id = new Guid("5340d227-9b39-495f-9ac2-7e59d85a899c"),
                            AddressId = new Guid("bb8dc4af-fc43-4966-96b8-2b15d5900f27"),
                            CreatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9565),
                            Email = "admin@gmail.com",
                            Name = "Admin",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9565)
                        },
                        new
                        {
                            Id = new Guid("970d35d3-4e85-4c8c-be72-07c5ef2bb419"),
                            AddressId = new Guid("d5624734-40da-4844-bb7d-9810ba1a9a8a"),
                            CreatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9567),
                            Email = "admin2@gmail.com",
                            Name = "Admin2",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9567)
                        },
                        new
                        {
                            Id = new Guid("c008bba0-8bc1-4058-b071-ae6556d5573f"),
                            AddressId = new Guid("2c05a698-a94f-42b3-8d99-f221f7a4941b"),
                            CreatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9569),
                            Email = "admin3@gmail.com",
                            Name = "Admin3",
                            Password = "123sdda456",
                            UpdatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9570)
                        },
                        new
                        {
                            Id = new Guid("de713641-526d-42af-bc02-49b8b2949787"),
                            AddressId = new Guid("efba08a9-544c-4f50-90c0-5656763cc927"),
                            CreatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9573),
                            Email = "DebyDebyDoo@gmail.com",
                            Name = "DebyDoo",
                            Password = "debugger",
                            UpdatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9573)
                        },
                        new
                        {
                            Id = new Guid("d21381ef-d7d5-48f4-b4b0-9e16586c0f16"),
                            AddressId = new Guid("0c54faa4-0677-4047-b5de-4dbc22b94afc"),
                            CreatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9575),
                            Email = "none@gmail.com",
                            Name = "nonexistant",
                            Password = "123456",
                            UpdatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9576)
                        },
                        new
                        {
                            Id = new Guid("e032fe70-004c-4b9f-a29f-6703a8510f14"),
                            AddressId = new Guid("cfde2a17-4ab2-4eab-85c8-ce723f93199c"),
                            CreatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9578),
                            Email = "duje@gmail.com",
                            Name = "duje",
                            Password = "1111",
                            UpdatedAt = new DateTime(2023, 4, 25, 20, 56, 2, 181, DateTimeKind.Utc).AddTicks(9578)
                        });
                });

            modelBuilder.Entity("Data.Entities.Models.BuyersProducts", b =>
                {
                    b.HasOne("Data.Entities.Models.User", "Buyer")
                        .WithMany("BoughtProducts")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.Product", "Product")
                        .WithMany("Buyers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.HasOne("Data.Entities.Models.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.HasOne("Data.Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.Location", "Location")
                        .WithMany("Products")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.User", "Seller")
                        .WithMany("ListedProducts")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Models.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Seller");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.HasOne("Data.Entities.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.HasOne("Data.Entities.Models.Location", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Data.Entities.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Data.Entities.Models.Country", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Data.Entities.Models.Location", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Entities.Models.Product", b =>
                {
                    b.Navigation("Buyers");
                });

            modelBuilder.Entity("Data.Entities.Models.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.Models.User", b =>
                {
                    b.Navigation("BoughtProducts");

                    b.Navigation("ListedProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
